<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_red_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///image speed

  image_speed = 0.12;   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start vars

move[0] = 0;
move[1] = 0;

gridSize = 16;     // Should be power of 2 (...8,16,32...)
isMoving = false;  // Keeps track of when player is moving
moveTimer = 0;  // Counts down from grid size each step
moveSpeed = 1;     // Do not set higher than grid size!
speedX = 0;
speedY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ghost movement

/*
   When not moving, check to see if a direction key is held.
   If so, assign x/y speed and change status to moving.
*/
//show_debug_message(SwipeTime);
if (isMoving == false)
{   
    //
    //right
    //
    if (move[0] == 1 )
    {
    dir = "r";
    if(!(place_meeting(x+8,y,obj_wall)) &amp;&amp; !(place_meeting(x+8,y,obj_side)))    //if theres no wall
    {
        isMoving = true;
        moveTimer = gridSize;
        speedX = moveSpeed;
        speedY = 0;
        startSwipe = false;
    }
    
    }

    //
    //up
    //
    if (move[1] == -1)
    {
    dir = "u";
        if(!(place_meeting(x,y-8,obj_wall)) &amp;&amp; !(place_meeting(x,y-8,obj_side))) 
    {
        isMoving = true;
        moveTimer = gridSize;
        speedX = 0;
        speedY = -moveSpeed;
        startSwipe = false;
    }
   
    }
    
    //
    // left
    //
    if (move[0] == -1)
    {
    dir = "l";
        if(!(place_meeting(x-8,y,obj_wall)) &amp;&amp; !(place_meeting(x-8,y,obj_side))) 
    {
        isMoving = true;
        moveTimer = gridSize;
        speedX = -moveSpeed;
        speedY = 0;
        startSwipe = false;
    }
    
    }
    
    //
    //down
    //
    if (move[1] == 1 )
    {
    dir = "d";
        if(!(place_meeting(x,y+8,obj_wall)) &amp;&amp; !(place_meeting(x,y+8,obj_side))) 
    {
        isMoving = true;
        moveTimer = gridSize;
        speedX = 0;
        speedY = moveSpeed;
        startSwipe = false;
    }
    
    }
}

/*
   When moving, subtract from moveTimer our moveSpeed value
   and update location relevant to set speeds.
   Stop moving when moveTimer reaches zero.
*/
if (isMoving == true)
{
   x += speedX;
   y += speedY
   
   moveTimer -= moveSpeed;
   if (moveTimer == 0) 
   {
   
   if(x &gt; xprevious)
   {
         sprite_index = spr_red_right;
    }
    if(x &lt; xprevious)
    {
         sprite_index = spr_red_left;
    }
    if(y &gt; yprevious)
    {
         sprite_index = spr_red_down;
    }
    if(y &lt; yprevious)
    {
         sprite_index = spr_red_up;
    }
   isMoving = false;
   
   }
}

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
